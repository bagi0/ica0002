---

  - name: Install bind
    ansible.builtin.apt:
      name: 
        - bind9
        - python3-dnspython 
      state: latest   

  - name: Start service bind9, if not started
    ansible.builtin.service:
      name: bind9
      state: started
      enabled: yes

  - name: Bind9 exporter
    ansible.builtin.apt:
      name: prometheus-bind-exporter

  - name: Start Bind9 exporter
    ansible.builtin.service:
      name: prometheus-bind-exporter
      state: started
      enabled: yes
      
  - name: Configure options.j2
    ansible.builtin.template:
      src: templates/named.conf.options.j2
      dest: /etc/bind/named.conf.options
    notify: Restart bind
  
  - name: Disable systemd-resolved
    service:
      name: systemd-resolved
      state: stopped
      enabled: no
    
  - name: Configure local.j2
    template:
      src: templates/named.conf.local.j2
      dest: /etc/bind/named.conf.local     
    notify: 
      - Restart bind
      - Restart rndc
  - name: Configure rabagh.io.j2
    template:
      src: templates/db.rabagh.j2
      dest: /var/cache/bind/db.rabagh.io
      force: no
    notify: 
      - Restart bind
      - Restart rndc
    when: inventory_hostname in groups ['dns_primary']

  - name: Configure db.rev.j2
    template:
      src: db.rev.j2
      dest: /var/cache/bind/rev.db
      force: no
    notify: 
      - Restart bind
      - Restart rndc
    when: inventory_hostname in groups ['dns_primary']

  - name: Copy resolv.conf
    template:
      src: templates/resolv.conf
      dest: /etc/resolv.conf
    notify: 
        - Restart bind 
        - Restart rndc
        
  - name: Upload prometheus bind exporter var conf
    ansible.builtin.template:
      src: prometheus-bind-exporter
      dest: /etc/default/prometheus-bind-exporter

  - name: Ensure bind_exporters is always started please
    ansible.builtin.service:
      name: prometheus-bind-exporter
      enabled: yes
      state: started
     
  - name: Create A records
    community.general.nsupdate:
      key_name: "nsupdate.key"
      key_algorithm: "hmac-sha256"
      key_secret: "{{ dns_nsupdate_key}}"
      server: "{{ hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address'] }}"
      zone: "{{ fqdn }}."
      record: "{{ item['subdomain'] }}.{{ fqdn }}."
      type: "A"
      value: "{{ item['ip'] }}"
    loop: "{{ a_records }}"
    when: inventory_hostname in groups ['dns_primary']

  - name: Create CNAME records
    community.general.nsupdate:
      key_name: "nsupdate.key"
      key_algorithm: "hmac-sha256"
      key_secret: "{{ dns_nsupdate_key }}"
      server: "{{ hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address'] }}"
      zone: "{{ fqdn }}"
      record: "{{ item.key }}"
      type: "CNAME"
      value: "{{ item.value }}"
    loop: "{{ dns_cname_records | dict2items }}"
    when: inventory_hostname in groups ['dns_primary']

